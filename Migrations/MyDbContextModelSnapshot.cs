// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hotel.Models;

#nullable disable

namespace hotel.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FisicaReservaHotel", b =>
                {
                    b.Property<int>("FisicaId")
                        .HasColumnType("integer");

                    b.Property<int>("ReservaHotelid")
                        .HasColumnType("integer");

                    b.HasKey("FisicaId", "ReservaHotelid");

                    b.HasIndex("ReservaHotelid");

                    b.ToTable("FisicaReservaHotel");
                });

            modelBuilder.Entity("hotel.Models.Parceiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("atividade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tipopessoa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parceiro");
                });

            modelBuilder.Entity("hotel.Models.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pessoa");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pessoa");
                });

            modelBuilder.Entity("hotel.Models.ReservaHotel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("datareserva")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("numeroreserva")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("valor")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("ReservaHotel");
                });

            modelBuilder.Entity("JuridicaParceiro", b =>
                {
                    b.Property<int>("JuridicaId")
                        .HasColumnType("integer");

                    b.Property<int>("ParceiroId")
                        .HasColumnType("integer");

                    b.HasKey("JuridicaId", "ParceiroId");

                    b.HasIndex("ParceiroId");

                    b.ToTable("JuridicaParceiro");
                });

            modelBuilder.Entity("hotel.Models.Fisica", b =>
                {
                    b.HasBaseType("hotel.Models.Pessoa");

                    b.Property<int?>("ParceiroId")
                        .HasColumnType("integer");

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("genero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("nascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ParceiroId");

                    b.HasDiscriminator().HasValue("Fisica");
                });

            modelBuilder.Entity("hotel.Models.Juridica", b =>
                {
                    b.HasBaseType("hotel.Models.Pessoa");

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("fundacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("inscricaoestadual")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Juridica");
                });

            modelBuilder.Entity("FisicaReservaHotel", b =>
                {
                    b.HasOne("hotel.Models.Fisica", null)
                        .WithMany()
                        .HasForeignKey("FisicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hotel.Models.ReservaHotel", null)
                        .WithMany()
                        .HasForeignKey("ReservaHotelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuridicaParceiro", b =>
                {
                    b.HasOne("hotel.Models.Juridica", null)
                        .WithMany()
                        .HasForeignKey("JuridicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hotel.Models.Parceiro", null)
                        .WithMany()
                        .HasForeignKey("ParceiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hotel.Models.Fisica", b =>
                {
                    b.HasOne("hotel.Models.Parceiro", "Parceiro")
                        .WithMany("Fisica")
                        .HasForeignKey("ParceiroId");

                    b.Navigation("Parceiro");
                });

            modelBuilder.Entity("hotel.Models.Parceiro", b =>
                {
                    b.Navigation("Fisica");
                });
#pragma warning restore 612, 618
        }
    }
}
